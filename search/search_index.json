{
    "docs": [
        {
            "location": "/", 
            "text": "After-Effects\n\n\nAn effortless post install script for Ubuntu \n\n\nWhy?\n\n\nUpgrading a Linux machine comes with lot of headache. Somethings might break, somethings might not work or you might just want to\nstart fresh. Beauty of Linux is almost everything is scriptable. Re-installing is just a matter of putting your favorite distribution on USB, install and configuring it. If you do it often and over a fleet of machines, then its a pain. You can run a few scripts to automate it, but they are not so flexible. A package changed its name? PPA not available for the current release? You need to edit your script, test it and run it.\n\n\nHow?\n\n\nWhat if your script could be \"configured\"? Just add the package you want to install to your config file. No need to search through code to do it. Separating your preferences and package lists from the script frees you from writing the script every time a new release comes around. This project helps you do just that. Its poor man's Chef. Most of your preferences and configurations are separate from script.\n\n\nReally? A shell-script ?\n\n\nYes! Because it has almost zero dependencies. No need to have Python or Ruby or other dependencies. Its simple and efficient. Someone can edit it to fit their needs too.  \n\n\nHow do I start?\n\n\nSee \nGetting Started\n.\n\n\nScreenshots", 
            "title": "Introduction"
        }, 
        {
            "location": "/#after-effects", 
            "text": "An effortless post install script for Ubuntu", 
            "title": "After-Effects"
        }, 
        {
            "location": "/#why", 
            "text": "Upgrading a Linux machine comes with lot of headache. Somethings might break, somethings might not work or you might just want to\nstart fresh. Beauty of Linux is almost everything is scriptable. Re-installing is just a matter of putting your favorite distribution on USB, install and configuring it. If you do it often and over a fleet of machines, then its a pain. You can run a few scripts to automate it, but they are not so flexible. A package changed its name? PPA not available for the current release? You need to edit your script, test it and run it.", 
            "title": "Why?"
        }, 
        {
            "location": "/#how", 
            "text": "What if your script could be \"configured\"? Just add the package you want to install to your config file. No need to search through code to do it. Separating your preferences and package lists from the script frees you from writing the script every time a new release comes around. This project helps you do just that. Its poor man's Chef. Most of your preferences and configurations are separate from script.", 
            "title": "How?"
        }, 
        {
            "location": "/#really-a-shell-script", 
            "text": "Yes! Because it has almost zero dependencies. No need to have Python or Ruby or other dependencies. Its simple and efficient. Someone can edit it to fit their needs too.", 
            "title": "Really? A shell-script ?"
        }, 
        {
            "location": "/#how-do-i-start", 
            "text": "See  Getting Started .", 
            "title": "How do I start?"
        }, 
        {
            "location": "/#screenshots", 
            "text": "", 
            "title": "Screenshots"
        }, 
        {
            "location": "/getting-started/", 
            "text": "How to use?\n\n\nInstall Ubuntu\n\n\nInstall (if you haven't already) your choice of Ubuntu/Derivative as you would( If you wish to automate that too, you can use preseed.cfg file)\n\n\nStep 1: Get the script\n\n\nWithout Git\n\n\nRun this in Terminal\n\n\nwget -Nnv https://raw.githubusercontent.com/tprasadtp/ubuntu-post-install/master/get-after-effects.sh -O - \n|\n bash\n\n\n\n\nWith Git\n\n\nIf you already have git on your system you can use,\n\n\ngit clone --depth \n1\n https://github.com/tprasadtp/ubuntu-post-install.git \n \ncd\n ubuntu-post-install\n\n\n\n\nStep 2: Update the lists to suit your needs (Optional)\n\n\nUpdate the list files to suit your needs. Change PPAs, add or delete packages to list, tweak variables etc.\nPlease see \nConfiguration\n \n \nTasks\n for more details.\n\n\nStep 3: Run it\n\n\nRun the script as \nroot\n. You will get an error if you do not run the script as root.\n\n\n\n\nTip\n\n\nBefore you run the script, make sure that its executable.\n\n\n\n\nsudo ./after-effects\n\n\n\n\nNote for using this script inside docker containers\nIf you are running this in a docker container, you probably are root.\nIts possible that you might be missing \nsudo\n package. So In that case just run it as \n./after-effects\n. Be warned! You probably are missing several dependencies of the script!\nStep 4: Rejoice", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#how-to-use", 
            "text": "", 
            "title": "How to use?"
        }, 
        {
            "location": "/getting-started/#install-ubuntu", 
            "text": "Install (if you haven't already) your choice of Ubuntu/Derivative as you would( If you wish to automate that too, you can use preseed.cfg file)", 
            "title": "Install Ubuntu"
        }, 
        {
            "location": "/getting-started/#step-1-get-the-script", 
            "text": "", 
            "title": "Step 1: Get the script"
        }, 
        {
            "location": "/getting-started/#without-git", 
            "text": "Run this in Terminal  wget -Nnv https://raw.githubusercontent.com/tprasadtp/ubuntu-post-install/master/get-after-effects.sh -O -  |  bash", 
            "title": "Without Git"
        }, 
        {
            "location": "/getting-started/#with-git", 
            "text": "If you already have git on your system you can use,  git clone --depth  1  https://github.com/tprasadtp/ubuntu-post-install.git    cd  ubuntu-post-install", 
            "title": "With Git"
        }, 
        {
            "location": "/getting-started/#step-2-update-the-lists-to-suit-your-needs-optional", 
            "text": "Update the list files to suit your needs. Change PPAs, add or delete packages to list, tweak variables etc.\nPlease see  Configuration     Tasks  for more details.", 
            "title": "Step 2: Update the lists to suit your needs (Optional)"
        }, 
        {
            "location": "/getting-started/#step-3-run-it", 
            "text": "Run the script as  root . You will get an error if you do not run the script as root.   Tip  Before you run the script, make sure that its executable.   sudo ./after-effects  Note for using this script inside docker containers If you are running this in a docker container, you probably are root. Its possible that you might be missing  sudo  package. So In that case just run it as  ./after-effects . Be warned! You probably are missing several dependencies of the script!", 
            "title": "Step 3: Run it"
        }, 
        {
            "location": "/getting-started/#step-4-rejoice", 
            "text": "", 
            "title": "Step 4: Rejoice"
        }, 
        {
            "location": "/faq/dependencies/", 
            "text": "Dependencies\n\n\nWhat do I need to run this?\n\n\nUsually nothing extra! Your base Ubuntu install comes with all the commands/utilities this script uses, unless you are running this on Ubuntu docker image.\n\n\nCore dependencies\n\n\nThe script depends on following utilities which are usually present on a typical Ubuntu/Ubuntu based installation. If these packages are not installed, script will exit with error code 1.\n\n\n\n\nlsb-release\n, for determining the release and distribution.\n\n\nwhiptail\n, to display the menu.\n\n\ncoreutils\n cu, tr, grep etc.\n\n\nwget\n, to get deb packages, report stats, get version information.\n\n\niputils-ping\n, to test connectivity.\n\n\nprocps\n to check running processes\n\n\nbash\n\n\n\n\n\n\nNote on Debian\n\n\nDebian releases, especially docekr images sometimes do not have \nps\n binary from \nprocps\n pre installed. Please install the packages before continuing.\n\n\n\n\nAdditional packages installed\n\n\nSome tasks might install packages automatically, which are required to perform certain actions.\n\n\nAdditional APT packages installed\nSome apt packages will be installed automatically, as they are necessary to perform selected tasks.\nFor repository related tasks\napt-transport-https\nca-certificates\ncurl\ngpg\nsoftware-properties-common\nFor installing python packages\npython-pip (for python 2)\npython3-pip (for python 3)\nFor resetting repositories\nppa-purge\nAdditional dependencies of these packages will also be installed.", 
            "title": "Dependecies"
        }, 
        {
            "location": "/faq/dependencies/#dependencies", 
            "text": "", 
            "title": "Dependencies"
        }, 
        {
            "location": "/faq/dependencies/#what-do-i-need-to-run-this", 
            "text": "Usually nothing extra! Your base Ubuntu install comes with all the commands/utilities this script uses, unless you are running this on Ubuntu docker image.", 
            "title": "What do I need to run this?"
        }, 
        {
            "location": "/faq/dependencies/#core-dependencies", 
            "text": "The script depends on following utilities which are usually present on a typical Ubuntu/Ubuntu based installation. If these packages are not installed, script will exit with error code 1.   lsb-release , for determining the release and distribution.  whiptail , to display the menu.  coreutils  cu, tr, grep etc.  wget , to get deb packages, report stats, get version information.  iputils-ping , to test connectivity.  procps  to check running processes  bash    Note on Debian  Debian releases, especially docekr images sometimes do not have  ps  binary from  procps  pre installed. Please install the packages before continuing.", 
            "title": "Core dependencies"
        }, 
        {
            "location": "/faq/dependencies/#additional-packages-installed", 
            "text": "Some tasks might install packages automatically, which are required to perform certain actions.  Additional APT packages installed Some apt packages will be installed automatically, as they are necessary to perform selected tasks.", 
            "title": "Additional packages installed"
        }, 
        {
            "location": "/faq/dependencies/#for-repository-related-tasks", 
            "text": "apt-transport-https ca-certificates curl gpg software-properties-common", 
            "title": "For repository related tasks"
        }, 
        {
            "location": "/faq/dependencies/#for-installing-python-packages", 
            "text": "python-pip (for python 2) python3-pip (for python 3)", 
            "title": "For installing python packages"
        }, 
        {
            "location": "/faq/dependencies/#for-resetting-repositories", 
            "text": "ppa-purge Additional dependencies of these packages will also be installed.", 
            "title": "For resetting repositories"
        }, 
        {
            "location": "/faq/distros/", 
            "text": "What all distributions are supported?\n\n\nIn short? Ubuntu, its official flavors (Kubuntu,Ubuntu Mate etc), Linux Mint and Elementary.\n\n\nAbout 32 bit Support\nThough 32 bit is supported, Testing in Travis CI, containers and locally all are done using 64 bit machine and containers. If something breaks please report it and use it with caution on 32 bit machines.\nSince 17.10 Ubuntu no longer provides 32 bit ISO images. You have to use Ubuntu flavors like Lubuntu. Xubuntu or use minimal ISO.\n\n\nWarning!\n\n\nScript will exit, if it cannot recognize the distribution.\n\n\n\n\nA Complete  list of supported distributions is given below.\n\n\n\n\n\n\n\n\nDistribution\n\n\nCodename/Version\n\n\nSupported\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nUbuntu 18.04\n\n\nBionic Beaver\n\n\nYes\n\n\n\n\n\n\n\n\nUbuntu 17.10\n\n\nArtful Aardvark\n\n\nYes\n\n\n\n\n\n\n\n\nUbuntu 16.04\n\n\nXenial Xerus\n\n\nYes\n\n\n\n\n\n\n\n\nUbuntu 14.04\n\n\nTrusty Thar\n\n\nYes\n\n\n\n\n\n\n\n\nUbuntu 18.10\n\n\nCosmic Cuttlefish\n\n\nNo\n\n\nOnly use it for testing\n\n\n\n\n\n\nLinux Mint 17\n\n\nQuina\n\n\nYes\n\n\n\n\n\n\n\n\nLinux-Mint 17.1\n\n\nRebecca\n\n\nYes\n\n\n\n\n\n\n\n\nLinux-Mint 17.2\n\n\nRafaela\n\n\nYes\n\n\n\n\n\n\n\n\nLinux-Mint 17.3\n\n\nRosa\n\n\nYes\n\n\n\n\n\n\n\n\nLinux Mint 18\n\n\nSarah\n\n\nYes\n\n\n\n\n\n\n\n\nLinux-Mint 18.1\n\n\nSerena\n\n\nYes\n\n\n\n\n\n\n\n\nLinux-Mint 18.2\n\n\nSonya\n\n\nYes\n\n\n\n\n\n\n\n\nLinux-Mint 18.3\n\n\nSylvia\n\n\nYes\n\n\n\n\n\n\n\n\nLinux Mint 19\n\n\nTara\n\n\nNo\n\n\nWill be in the future\n\n\n\n\n\n\nElementary-OS\n\n\nFreya\n\n\nYes\n\n\n\n\n\n\n\n\nElementary-OS\n\n\nLoki\n\n\nYes\n\n\n\n\n\n\n\n\nBudgie Remix\n\n\n16.04\n\n\nYes\n\n\n\n\n\n\n\n\nPoP! OS\n\n\n17.10 \n 18.04\n\n\nYes\n\n\n\n\n\n\n\n\nLinux-Lite\n\n\n3.X\n\n\nYes\n\n\n(Based on Ubuntu 16.04)\n\n\n\n\n\n\nZorin-OS\n\n\n12.X\n\n\nYes\n\n\n(Based on Ubuntu 16.04)\n\n\n\n\n\n\nBodhi Linux\n\n\n4\n\n\nYes\n\n\n(Based on Ubuntu 16.04)\n\n\n\n\n\n\nDebian 8\n\n\nJessie\n\n\nYes\n\n\n\n\n\n\n\n\nDebian 9\n\n\nStretch\n\n\nYes\n\n\n\n\n\n\n\n\n\n\nPre-Release and development builds\nSupport for Ubuntu Pre-release builds, Elementary OS Juno are \nexperimental\n and things might break.\nThey have not been released in stable release channels and are considered development versions of the release.\nIt is strongly advised to use them in a chroot or a in a VM and \nnot\n as a daily driver.\nNew App-store on Linux Mint 18.3 and above\nLinux mint 18.3 \n later releases uses a new App-Store, from which you can directly install Chrome and other popular tools. There may be some conflicts in the \n/etc/apt/sources.list.d\n. Where, a single repository might be configured multiple times with same priority. Use it with caution. The scripts are not tested on Travis on Linux Mint.", 
            "title": "Supported"
        }, 
        {
            "location": "/faq/distros/#what-all-distributions-are-supported", 
            "text": "In short? Ubuntu, its official flavors (Kubuntu,Ubuntu Mate etc), Linux Mint and Elementary.  About 32 bit Support Though 32 bit is supported, Testing in Travis CI, containers and locally all are done using 64 bit machine and containers. If something breaks please report it and use it with caution on 32 bit machines. Since 17.10 Ubuntu no longer provides 32 bit ISO images. You have to use Ubuntu flavors like Lubuntu. Xubuntu or use minimal ISO.  Warning!  Script will exit, if it cannot recognize the distribution.   A Complete  list of supported distributions is given below.     Distribution  Codename/Version  Supported  Notes      Ubuntu 18.04  Bionic Beaver  Yes     Ubuntu 17.10  Artful Aardvark  Yes     Ubuntu 16.04  Xenial Xerus  Yes     Ubuntu 14.04  Trusty Thar  Yes     Ubuntu 18.10  Cosmic Cuttlefish  No  Only use it for testing    Linux Mint 17  Quina  Yes     Linux-Mint 17.1  Rebecca  Yes     Linux-Mint 17.2  Rafaela  Yes     Linux-Mint 17.3  Rosa  Yes     Linux Mint 18  Sarah  Yes     Linux-Mint 18.1  Serena  Yes     Linux-Mint 18.2  Sonya  Yes     Linux-Mint 18.3  Sylvia  Yes     Linux Mint 19  Tara  No  Will be in the future    Elementary-OS  Freya  Yes     Elementary-OS  Loki  Yes     Budgie Remix  16.04  Yes     PoP! OS  17.10   18.04  Yes     Linux-Lite  3.X  Yes  (Based on Ubuntu 16.04)    Zorin-OS  12.X  Yes  (Based on Ubuntu 16.04)    Bodhi Linux  4  Yes  (Based on Ubuntu 16.04)    Debian 8  Jessie  Yes     Debian 9  Stretch  Yes      Pre-Release and development builds Support for Ubuntu Pre-release builds, Elementary OS Juno are  experimental  and things might break. They have not been released in stable release channels and are considered development versions of the release. It is strongly advised to use them in a chroot or a in a VM and  not  as a daily driver. New App-store on Linux Mint 18.3 and above Linux mint 18.3   later releases uses a new App-Store, from which you can directly install Chrome and other popular tools. There may be some conflicts in the  /etc/apt/sources.list.d . Where, a single repository might be configured multiple times with same priority. Use it with caution. The scripts are not tested on Travis on Linux Mint.", 
            "title": "What all distributions are supported?"
        }, 
        {
            "location": "/faq/errors/", 
            "text": "Errors\n\n\nWhat if I get an error saying Unknown Distribution/Release?\n\n\nThat usually means you are running a Distribution which is not supported or too old or a derivative which is not recognized by the script. However it also might be possible that \nlsb-release\n package is missing from your system. Since the script depends on it for determining what is the code-name of the release it will fail.\nYou might see ans error like this,\n\n\n./after-effects: line 41: lsb_release: command not found\n./after-effects: line 42: lsb_release: command not found\n./after-effects: line 43: lsb_release: command not found\n./after-effects: line 44: lsb_release: command not found\n[    Notice     ] Following details were recognized by the Script.\n[     Info      ] Distro:\n[     Info      ] Version:\n[     Info      ] Code Name:\n[     Info      ] Architecture: amd64\n[     Info      ] Path for sources.list.d: /etc/apt/sources.list.d\n[    WARNING    ] Will automatically assume yes for all the options available in the script!\n[   Simulating  ] is set to true\n[  Derivatives  ] Checking for Ubuntu based Distributions\n[     Error!    ] Unknown Distribution/Release.\n[    Notice     ] This Script is not designed to run on this () distro/release.\n\n\n\n\n\n\nIt means that you do not have \nlsb-release\n package installed. It happens usually on docker containers. See \nWhat are its dependencies? What do I need on my system to run this?\n\n\nInstall \nlsb-release\n package using \napt-get -y install lsb-release\n\n\nIn the case above you are probably missing other dependencies as well. It might be a good idea to install those dependencies first.\n\n\n\n\nWhat if I get an error saying this release of Ubuntu is no longer supported?\n\n\n[      EOL      ] This release of Ubuntu is no longer supported.\n[    Notice     ] zesty reached EOL on January 13th, 2018.\n[    Notice     ] Please use a supported version of Ubuntu.\n[     Info      ] Please visit the link below for information on how to upgrade.", 
            "title": "Errors"
        }, 
        {
            "location": "/faq/errors/#errors", 
            "text": "", 
            "title": "Errors"
        }, 
        {
            "location": "/faq/errors/#what-if-i-get-an-error-saying-unknown-distributionrelease", 
            "text": "That usually means you are running a Distribution which is not supported or too old or a derivative which is not recognized by the script. However it also might be possible that  lsb-release  package is missing from your system. Since the script depends on it for determining what is the code-name of the release it will fail.\nYou might see ans error like this,  ./after-effects: line 41: lsb_release: command not found\n./after-effects: line 42: lsb_release: command not found\n./after-effects: line 43: lsb_release: command not found\n./after-effects: line 44: lsb_release: command not found\n[    Notice     ] Following details were recognized by the Script.\n[     Info      ] Distro:\n[     Info      ] Version:\n[     Info      ] Code Name:\n[     Info      ] Architecture: amd64\n[     Info      ] Path for sources.list.d: /etc/apt/sources.list.d\n[    WARNING    ] Will automatically assume yes for all the options available in the script!\n[   Simulating  ] is set to true\n[  Derivatives  ] Checking for Ubuntu based Distributions\n[     Error!    ] Unknown Distribution/Release.\n[    Notice     ] This Script is not designed to run on this () distro/release.   It means that you do not have  lsb-release  package installed. It happens usually on docker containers. See  What are its dependencies? What do I need on my system to run this?  Install  lsb-release  package using  apt-get -y install lsb-release  In the case above you are probably missing other dependencies as well. It might be a good idea to install those dependencies first.", 
            "title": "What if I get an error saying Unknown Distribution/Release?"
        }, 
        {
            "location": "/faq/errors/#what-if-i-get-an-error-saying-this-release-of-ubuntu-is-no-longer-supported", 
            "text": "[      EOL      ] This release of Ubuntu is no longer supported.\n[    Notice     ] zesty reached EOL on January 13th, 2018.\n[    Notice     ] Please use a supported version of Ubuntu.\n[     Info      ] Please visit the link below for information on how to upgrade.", 
            "title": "What if I get an error saying this release of Ubuntu is no longer supported?"
        }, 
        {
            "location": "/faq/linuxmint/", 
            "text": "Linux Mint 17.X and PPA priorities\n\n\n\n\nNote\n\n\nThis applies only for Linux Mint \n17, 17.1\n and \n17.2\n\n\n\n\n\n\nFor some reason, The Mint team decided to make their repository packages set with a priority of 700 in order to overwrite Ubuntu\u2019s priorities. PPAs typically issue a priority of 500, so due to the priority that Mint set, packages provided by the PPA which are already in the official mint repository (upstream Ubuntu as well) are completely ignored. Workaround is to set the priorities to lower for default repositories say 500 in /etc/apt/preferences.d/ or to increase priorities of PPAs to higher (more than 700).\n\n\nThis was changed in Linux Mint 17.3 and no need to change the priorities unless it provides upstream Linux Mint packages. The release notes for mint 17.3 says\n\n\n\n\n\n\nQuote\n\n\nThe \"upstream\" component of the Linux Mint repositories was kept at priority 700. All other components (\"main\", \"import\", \"backport\", \"romeo\") as well as the \"extra\" repository, had their priority lowered to 500.", 
            "title": "Linux Mint"
        }, 
        {
            "location": "/faq/linuxmint/#linux-mint-17x-and-ppa-priorities", 
            "text": "Note  This applies only for Linux Mint  17, 17.1  and  17.2    For some reason, The Mint team decided to make their repository packages set with a priority of 700 in order to overwrite Ubuntu\u2019s priorities. PPAs typically issue a priority of 500, so due to the priority that Mint set, packages provided by the PPA which are already in the official mint repository (upstream Ubuntu as well) are completely ignored. Workaround is to set the priorities to lower for default repositories say 500 in /etc/apt/preferences.d/ or to increase priorities of PPAs to higher (more than 700).  This was changed in Linux Mint 17.3 and no need to change the priorities unless it provides upstream Linux Mint packages. The release notes for mint 17.3 says    Quote  The \"upstream\" component of the Linux Mint repositories was kept at priority 700. All other components (\"main\", \"import\", \"backport\", \"romeo\") as well as the \"extra\" repository, had their priority lowered to 500.", 
            "title": "Linux Mint 17.X and PPA priorities"
        }, 
        {
            "location": "/faq/crash/", 
            "text": "Script Crashed\n\n\n\n\nReport\n\n\nWell, that shouldn't have happened. Please consider opening an issue on \nGithub\n.\n\n\n\n\nHow to recover from it?\n\n\n\n\n\n\nIf you know where it was stuck/crashed, just re-run the task(s) which were not completed. If you don't know, go and check log file. Each task is labeled and is clearly logged before starting and after completing. Just run the tasks which did not complete. You don't have to re-download the packages you have already downloaded, because they are already cached by apt-get.\n\n\n\n\n\n\nRemember, some operations of the script can be very lengthy and can involve lots of downloads (If you used default list files, expect up to 2 GB of traffic). So, it might appear that script is stuck because cursor stops blinking. However it is not the case. If you are unsure please check the logs.\n\n\n\n\n\n\n\n\nTip\n\n\nIn rare cases where your Ubuntu crashed while installing a DEB file, which has unmet dependencies, you might see broken packages error. In that case, run \nsudo apt-get install -f\n to fix the broken packages and re run the script. If you see any errors or script crashes please do not hesitate to open an issue on \nGithub\n.", 
            "title": "Crashes"
        }, 
        {
            "location": "/faq/crash/#script-crashed", 
            "text": "Report  Well, that shouldn't have happened. Please consider opening an issue on  Github .", 
            "title": "Script Crashed"
        }, 
        {
            "location": "/faq/crash/#how-to-recover-from-it", 
            "text": "If you know where it was stuck/crashed, just re-run the task(s) which were not completed. If you don't know, go and check log file. Each task is labeled and is clearly logged before starting and after completing. Just run the tasks which did not complete. You don't have to re-download the packages you have already downloaded, because they are already cached by apt-get.    Remember, some operations of the script can be very lengthy and can involve lots of downloads (If you used default list files, expect up to 2 GB of traffic). So, it might appear that script is stuck because cursor stops blinking. However it is not the case. If you are unsure please check the logs.     Tip  In rare cases where your Ubuntu crashed while installing a DEB file, which has unmet dependencies, you might see broken packages error. In that case, run  sudo apt-get install -f  to fix the broken packages and re run the script. If you see any errors or script crashes please do not hesitate to open an issue on  Github .", 
            "title": "How to recover from it?"
        }, 
        {
            "location": "/clioptions/", 
            "text": "Command line options\n\n\nSimulating package installation\n\n\n\n\nUsage\n\n\n./after-effects -s\n\n\nOR\n\n./after-effects --simulate\n\n\n\n\n\nThis flag/option applies to following tasks\nInstalling apt packages.\nInstalling Debian package archives (DEBs).\nInstalling Python packages.\nUpgrading system packages.\nPurging unwanted packages.\nFollowing details should explain the behavior of this flag. Please do have a look at exceptions, as all tasks cannot be simulated.\n\n\n\n\nThis option will simulate installing packages mentioned in the lists, using the apt-get in-built dry-run option \napt-get install -s\n to simulate the installation of packages. Nothing will be downloaded except repository metadata (deb files if option is chosen). Packages will not be installed.\n\n\nThis option can be used to check if the files in the lists are compatible/available in the repository.\n\n\nInstallation of DEB files also behaves similarly. It uses \ndpkg -i --dry-run\n to simulate installation.\n\n\nIts a very good idea to simulate installation when you have reconfigured the apps and packages in the list to check what might be error prone.\n\n\nIn case of DEB package files, they \nwill\n be downloaded unlike apt-get package installs.\n\n\n\n\nExceptions\nSimulate flag will not simulate or honor adding Repositories or PPAs.\nIf you want to revert the changes please use \nReset Repositories\n option.\nPPAs and repositories will be added regardless of the flag.\nPython package installation cannot be simulated. (pip lacks support for it) The script will skip installing apt dependencies and python packages, if simulate option is used.\n  it simulate option is used.\nAPT package upgrades and apt repository metadata updates cannot be simulated. Only a list of packages upgrade-able will be listed in the log file in case of upgrades.\nSimulate flag will not simulate installing dependencies for adding or deleting repositories and PPAs.\nSkip Version Checks\n\n\n\n\nUsage\n\n\n./after-effects --no-version-check\n\n\n\n\n\n\nScript will warn you and exit if you are not running latest version of the script. You can skip that by using the above option.\n\n\nFix for latest Ubuntu releases\n\n\n\n\nUsage\n\n\n./after-effects -f\n\n\nOR\n\n./after-effects --fix\n\n\n\n\n\nThis flag/option applies to following repositories\nGoogle Cloud SDK\nGCSFUSE\nInSync\nDocker Community Edition\nWine HQ\nUsually it takes a while for additional Repositories (Docker, Google Cloud SDK etc) to add support for latest release of Ubuntu. However we can use the previous release for which packages are available. So, using packages built for previous release works fine most of the time. This is also good fix if you are running a alpha or beta release of Ubuntu.\n\n\n\n\nBy default this option is disabled.\n\n\nUse \nsudo ./after-effects -f\n or \nsudo ./after-effects --fix\n to enable this.\n\n\nRepositories like Spotify and Google Chrome do not use code names in their repository URLs. So the above workaround is not necessary.\n\n\nDerivatives of Ubuntu will use the code name of Ubuntu on which they are based. For example Linux mint 18.2 Serena will use code name xenial since it is based on Ubuntu 16.04 Xenial Xerus\n\n\nThis option applies only for the latest release mentioned in the variable \ncode_name_latest_release\n. and will be ignored if the release is not latest.\n\n\nVariables in current version are (As of Dec 2017) change them if necessary.\n\n\n\n\nreadonly\n \ncode_name_latest_release\n=\nbionic\n\n\nreadonly\n \ncodename_previous_release\n=\nartful\n\n\nreadonly\n \ncodename_upcoming_release\n=\ncosmic\n\n\n\n\n\nNote for Pre-Release/ development version of Ubuntu\nIf you are using a pre-release version of Ubuntu, you can use \n--pre-release\n flag to apply the above mentioned fix to pre-release version of Ubuntu.\nThis flag can be used independent of \n--fix\n. If both are used together then both flags will be applied if the release is upcoming-release.\nIf the release is stable, only \n--fix\n flag will be valid and \n--pre-release\n is ignored.\nThis is how it works:  If the repositories are  not available for latest stable release as well, go back a release. Ex. If the pre-release is 18.04 and the repositories is not available for 17.10 as well, we use 17.04 repositories. Usually happens in first few days of development cycle of 18.04.\nSkip confirmation prompts\n\n\n\n\nUsage\n\n\n./after-effects -y\n\n\nOR\n\n./after-effects --yes\n\n\n\n\n\nFrom v3.0 onward, you will be asked for confirmation before performing the task selected. If you would like to bypass this on a CI environments like TRAVIS or for any other reason, you can do so by running the script with \nsudo ./after-effects -y\n or \nsudo ./after-effects --yes\n\n\nPurge not required packages\n\n\n\n\nUsage\n\n\n./after-effects -d\n\n\nOR\n\n./after-effects --deboalt\n\n\n\n\n\nUsually Ubuntu comes with some pre-installed games, packages which you sometimes do not need. This option is a switch to used in purging these packages mentioned in the subsequent sections. Since it is possible that user might purge necessary packages like sudo or other core system components, these just acts like a barrier from accidentally doing so.\n\n\n\n\nWarning\n\n\nThis flag \nMUST\n be passed, if you intend to purge packages from system. Otherwise you will receive an error.\n\n\n\n\nDelete log file\n\n\n\n\nUsage\n\n\n./after-effects -l\n\n\nOR\n\n./after-effects --delete-log\n\n\n\n\n\nJust a quick way to delete logs generated by this script.\n\n\n\n\nFlag priority\n\n\nIf you pass \n-l\n in the beginning rest of the commands will be ignored, as the script exits after deleting the log!\n\n\n\n\nKeep downloaded DEB files\n\n\n\n\nUsage\n\n\n./after-effects -k\n\n\nOR\n\n./after-effects --keep-debs\n\n\n\n\n\nKeeps packages cached by APT and downloaded DEB packages.\nDefault behavior is to clean apt cache and delete downloaded DEB packages.\n\n\n\n\nPython packages\n\n\nPython package installation does not honor this flag.\n\n\n\n\nEnable pre \n post task hooks\n\n\n\n\nUsage\n\n\nFor pre task hooks\n\n./after-effects --enable-pre\n\n\nFor post task hooks\n\n./after-effects --enable-post\n\n\n\n\n\nThere is an option to execute set of scripts defined in configuration files, before and after all the tasks are complete.\nThey are disabled by default and need to be enabled via \nenable-pre\n and \n--enable-post\n options. They can be used independently of each other. See Tasks section for more details on pre-post hooks.\n\n\nDo not report statistics\n\n\n\n\nUsage\n\n\n./after-effects --no-stats\n\n\nOR\n\n./after-effects --no-reporting\n\n\n\n\n\nDisables reporting statistics back to server.\n\n\nFollowing things are reported. (Nothing more than that)\n\n\n\n\nA UUID generated for each execution, (its random and is not persistent across runs),\n\n\nHost-name,\n\n\nLast exit code,\n\n\nSystem Architecture (x64/x86/ARM/ARM64),\n\n\nTotal execution time,\n\n\nDistribution name (Ubuntu, Linux Mint etc.),\n\n\nDistribution code name (bionic, artful etc),\n\n\nFeature/Task(s) selected,\n\n\nFlags used,\n\n\nTimezone and system language.\n\n\n\n\n\n\nWarning\n\n\nDisabling stat reporting will also disable remote config.\n\n\n\n\nPrivacy Concerns?\nIf you are freaking out, its a shell script !! You can literally look into it and check what's collected. Why if you ask? I mostly use it on a bunch of machines and would like to keep an eye on how it did.\nData will be stored in AWS DynamoDB and Google Firebase Real-time Database.\nData will not be shared with any third party. Period. Only me or my team members will have access\nto it. If you run a search query on google, it probably collects more data than me. API endpoints may log your IP addresses. (Github, Google and AWS).\nIf you flood the reporting endpoints, you might get HTTP 429 errors as reporting endpoints have rate limits. Script will exit with code 29.", 
            "title": "Options"
        }, 
        {
            "location": "/clioptions/#command-line-options", 
            "text": "", 
            "title": "Command line options"
        }, 
        {
            "location": "/clioptions/#simulating-package-installation", 
            "text": "Usage  ./after-effects -s \nOR ./after-effects --simulate   This flag/option applies to following tasks Installing apt packages. Installing Debian package archives (DEBs). Installing Python packages. Upgrading system packages. Purging unwanted packages. Following details should explain the behavior of this flag. Please do have a look at exceptions, as all tasks cannot be simulated.   This option will simulate installing packages mentioned in the lists, using the apt-get in-built dry-run option  apt-get install -s  to simulate the installation of packages. Nothing will be downloaded except repository metadata (deb files if option is chosen). Packages will not be installed.  This option can be used to check if the files in the lists are compatible/available in the repository.  Installation of DEB files also behaves similarly. It uses  dpkg -i --dry-run  to simulate installation.  Its a very good idea to simulate installation when you have reconfigured the apps and packages in the list to check what might be error prone.  In case of DEB package files, they  will  be downloaded unlike apt-get package installs.   Exceptions Simulate flag will not simulate or honor adding Repositories or PPAs. If you want to revert the changes please use  Reset Repositories  option. PPAs and repositories will be added regardless of the flag. Python package installation cannot be simulated. (pip lacks support for it) The script will skip installing apt dependencies and python packages, if simulate option is used.\n  it simulate option is used. APT package upgrades and apt repository metadata updates cannot be simulated. Only a list of packages upgrade-able will be listed in the log file in case of upgrades. Simulate flag will not simulate installing dependencies for adding or deleting repositories and PPAs.", 
            "title": "Simulating package installation"
        }, 
        {
            "location": "/clioptions/#skip-version-checks", 
            "text": "Usage  ./after-effects --no-version-check   Script will warn you and exit if you are not running latest version of the script. You can skip that by using the above option.", 
            "title": "Skip Version Checks"
        }, 
        {
            "location": "/clioptions/#fix-for-latest-ubuntu-releases", 
            "text": "Usage  ./after-effects -f \nOR ./after-effects --fix   This flag/option applies to following repositories Google Cloud SDK GCSFUSE InSync Docker Community Edition Wine HQ Usually it takes a while for additional Repositories (Docker, Google Cloud SDK etc) to add support for latest release of Ubuntu. However we can use the previous release for which packages are available. So, using packages built for previous release works fine most of the time. This is also good fix if you are running a alpha or beta release of Ubuntu.   By default this option is disabled.  Use  sudo ./after-effects -f  or  sudo ./after-effects --fix  to enable this.  Repositories like Spotify and Google Chrome do not use code names in their repository URLs. So the above workaround is not necessary.  Derivatives of Ubuntu will use the code name of Ubuntu on which they are based. For example Linux mint 18.2 Serena will use code name xenial since it is based on Ubuntu 16.04 Xenial Xerus  This option applies only for the latest release mentioned in the variable  code_name_latest_release . and will be ignored if the release is not latest.  Variables in current version are (As of Dec 2017) change them if necessary.   readonly   code_name_latest_release = bionic  readonly   codename_previous_release = artful  readonly   codename_upcoming_release = cosmic   Note for Pre-Release/ development version of Ubuntu If you are using a pre-release version of Ubuntu, you can use  --pre-release  flag to apply the above mentioned fix to pre-release version of Ubuntu. This flag can be used independent of  --fix . If both are used together then both flags will be applied if the release is upcoming-release. If the release is stable, only  --fix  flag will be valid and  --pre-release  is ignored. This is how it works:  If the repositories are  not available for latest stable release as well, go back a release. Ex. If the pre-release is 18.04 and the repositories is not available for 17.10 as well, we use 17.04 repositories. Usually happens in first few days of development cycle of 18.04.", 
            "title": "Fix for latest Ubuntu releases"
        }, 
        {
            "location": "/clioptions/#skip-confirmation-prompts", 
            "text": "Usage  ./after-effects -y \nOR ./after-effects --yes   From v3.0 onward, you will be asked for confirmation before performing the task selected. If you would like to bypass this on a CI environments like TRAVIS or for any other reason, you can do so by running the script with  sudo ./after-effects -y  or  sudo ./after-effects --yes", 
            "title": "Skip confirmation prompts"
        }, 
        {
            "location": "/clioptions/#purge-not-required-packages", 
            "text": "Usage  ./after-effects -d \nOR ./after-effects --deboalt   Usually Ubuntu comes with some pre-installed games, packages which you sometimes do not need. This option is a switch to used in purging these packages mentioned in the subsequent sections. Since it is possible that user might purge necessary packages like sudo or other core system components, these just acts like a barrier from accidentally doing so.   Warning  This flag  MUST  be passed, if you intend to purge packages from system. Otherwise you will receive an error.", 
            "title": "Purge not required packages"
        }, 
        {
            "location": "/clioptions/#delete-log-file", 
            "text": "Usage  ./after-effects -l \nOR ./after-effects --delete-log   Just a quick way to delete logs generated by this script.   Flag priority  If you pass  -l  in the beginning rest of the commands will be ignored, as the script exits after deleting the log!", 
            "title": "Delete log file"
        }, 
        {
            "location": "/clioptions/#keep-downloaded-deb-files", 
            "text": "Usage  ./after-effects -k \nOR ./after-effects --keep-debs   Keeps packages cached by APT and downloaded DEB packages.\nDefault behavior is to clean apt cache and delete downloaded DEB packages.   Python packages  Python package installation does not honor this flag.", 
            "title": "Keep downloaded DEB files"
        }, 
        {
            "location": "/clioptions/#enable-pre-post-task-hooks", 
            "text": "Usage  For pre task hooks ./after-effects --enable-pre \nFor post task hooks ./after-effects --enable-post   There is an option to execute set of scripts defined in configuration files, before and after all the tasks are complete.\nThey are disabled by default and need to be enabled via  enable-pre  and  --enable-post  options. They can be used independently of each other. See Tasks section for more details on pre-post hooks.", 
            "title": "Enable pre &amp; post task hooks"
        }, 
        {
            "location": "/clioptions/#do-not-report-statistics", 
            "text": "Usage  ./after-effects --no-stats \nOR ./after-effects --no-reporting   Disables reporting statistics back to server.  Following things are reported. (Nothing more than that)   A UUID generated for each execution, (its random and is not persistent across runs),  Host-name,  Last exit code,  System Architecture (x64/x86/ARM/ARM64),  Total execution time,  Distribution name (Ubuntu, Linux Mint etc.),  Distribution code name (bionic, artful etc),  Feature/Task(s) selected,  Flags used,  Timezone and system language.    Warning  Disabling stat reporting will also disable remote config.   Privacy Concerns? If you are freaking out, its a shell script !! You can literally look into it and check what's collected. Why if you ask? I mostly use it on a bunch of machines and would like to keep an eye on how it did. Data will be stored in AWS DynamoDB and Google Firebase Real-time Database.\nData will not be shared with any third party. Period. Only me or my team members will have access\nto it. If you run a search query on google, it probably collects more data than me. API endpoints may log your IP addresses. (Github, Google and AWS). If you flood the reporting endpoints, you might get HTTP 429 errors as reporting endpoints have rate limits. Script will exit with code 29.", 
            "title": "Do not report statistics"
        }, 
        {
            "location": "/tasks/", 
            "text": "What can it do?\n\n\nAdd Repositories\n\n\nThis will add the following repositories.\n\n\n\n\nInsync\n\n\nGoogle-Cloud-SDK\n\n\nGoogle-Cloud GCSFUSE\n\n\nDocker-CE (default add repository)\n\n\nWineHQ (Latest wine builds)\n\n\n\n\nUsing \n--fix\n falg\nPlease note that the above repositories are sometimes not updated for latest Ubuntu release and most certainly will not be available for upcoming release of Ubuntu(Alpha/Beta). It might take some time till the repositories are available for the latest release. Use -f or --fix command line option or --pre-release in case you are using a Development version of ubuntu to revert using latest available version of repositories (usually previous Ubuntu release or in case of Beta/Alpha latest stable release of ubuntu). \nFor more info see command line options.\n\n\nGoogle Earth\n\n\nGoogle Chrome\n\n\nSpotify\n\n\nVisual Studio Code\n\n\nSignal Desktop\n\n\nMendeley Desktop (Not added by default)\n\n\n\n\n\n\nPrefer local configuration\n\n\nThe script uses remote config files (/api/version) to determine whether to add repository or not. It helps in disabling some repositories which are often source of trouble. They always try to reflect default choices of the script. If you wish to disable it or override it, use \n--no-stats\n option as it will disable remote configuration as well \n local variables will determine the outcome.\n\n\n\n\n\n\nYour own Remote config\n\n\nYou can use your own remote config file. You need following to do so.\n- A Valid configuration file accessible over http/https/ftp without login.\n- You can copy the files in cfg directory of this branch.\n- Host the files on your own server/S3/website \n Note the base url for that directory.\n- Use --api-endpoint {protocol}://{BASE_URL} while running the script. (Note that there is no trailing slash)\n- Config files should be accessible over {protocol}://{BASEURL}/version\n\n\n\n\nCanonical partner repositories\n\n\nFollowing repositories are conditional and are determined based on the flags or conditions set.\n\n\n\n\nCanonical Partner repositories\n\n\n\n\nCanonical partner repositories are not configured or enabled for derivatives of Ubuntu because thee might be some conflicts.\n\n\n\n\nWineHQ \n Docker-Community-Edition (default is to add repositories)\n\n\n\n\nWineHQ and Docker-CE have a switch mentioned in beginning of the script and by default are as follows. Change according to your needs. If you re using 16.04 and above leaving this unchanged is the best option.\n\n\nDefault Variables\n#============================ Switches/ bools ================================\n\n\n  \n# Latest wine builds\n\n  \nadd_winehq_repo\n=\ntrue\n\n\n  \n#Docker community edition\n\n  \nadd_docker_repo\n=\ntrue\n\n\n  \n#Mendeley Desktop\n\n  \nadd_mendeley_repo\n=\nfalse\n\n\n  \n#Spotify\n\n  \nadd_spotify_repo\n=\ntrue\n\n\n  \n#InSync\n\n  \nadd_insync_repo\n=\ntrue\n\n\n  \n#Google Cloud SDK\n\n  \nadd_googlecloud_repo\n=\ntrue\n\n\n  \n#Signal\n\n  \nadd_signal_repo\n=\nfalse\n\n\n  \n#Skype\n\n  \nadd_skype_repo\n=\ntrue\n\n\n  \n#VS code\n\n  \nadd_vscode_repo\n=\ntrue\n\n\n  \n#Google\n\n  \nadd_google_repo\n=\ntrue\n\n\n  \n#Kubernetes\n\n  \nadd_kubernetes_repo\n=\nfalse\n\n\n  \n# Define Data Directory\n\n  \ndata_dir\n=\ndata\n\n\n\n\n\n\nNote on 32 bit Architecture\n\n\n\n\nPlease note that Google Chrome doesn't support 32 bit architecture, please use Chromium.\n\n\nSignal and Visual studio code do not support 32 bit architecture either.\n\n\n\n\n\n\nAdd personal package archives (PPA)\n\n\n\n\nPPAs can be added using the configuration file in data directory \n./data/ppa.list\n\n\nThis file \nSHOULD\n contain only one ppa entry per line (No comments or anything else anywhere in the file) in the format ppa:\n/ppa for example \nppa:mozillateam/firefox-next\n The file will be read and the PPAs will be added from the list.\n\n\nLogs will  show entry in the format \n[\ndate and time\n] [  PPA-Logs  ] \nlog\n\n\n\n\n\n\nWarning\n\n\n\n\nPPAs should be checked before they are added to the list. Sometimes PPAs listed in the file may not be available for all releases.\n\n\nDebian does not support PPAs.\n\n\n\n\n\n\nInstall apt packages\n\n\n\n\nPackages can be installed by using configuration lists in the data directory. This works similar to ppa list However its slightly different.\n\n\nThere is one \nmaster list\n or \nlist of lists\n which contains the path to the list files from which the packages are to be installed.\n\n\nThis master list should contain the path to list files relative to script in following manner, \ndir-relative-to-script\n/\nlist file\n. For example if you have a list file security.list in data directory, then entry should look exactly like \ndata/security.list\n\n\npackages in the files will not be installed if that file does not appear in the master list.\n\n\nIt helps keeping things separate for separate machines or needs. Minimal edit is required to switch from one list to another than rewriting the entire list file.\n\n\nThe Master list is named \napp-list.list\n and \nMUST\n only contain the list files one entry per line. \nNO\n comments or anything else is allowed.\n\n\nIndividual list files for different needs are to be written in similar way containing name of the package to be installed in one package per line format as before. similar to all the lists there \nSHOULD NOT\n be any comments or text or empty lines in those list files.\n\n\nYou can split files according to your needs and write your list of packages to be installed and only include the lists in the master list file which you intend to install.\n\n\nIt is a good idea to include packages from external repositories in a different list than others because they might fail sometimes.\n\n\nMake sure that all the packages in the lists are available for your release. Using \n-s\n command line option helps. Also check for the logs for any errors or conflicts.\n\n\n\n\nInstall Debian package archives (.deb files)\n\n\nThis will install deb files specified in the list deb-files.list\n\n\n\n\nLogs will  show entry in the format \n[\ndate and time\n] [  PKG  ] \nlog\n for dpkg actions and\n\n\nAPT Logs will  show entry in the format \n[\ndate and time\n] [  APT  ] \nlog\n for actions performed by apt commands. (\napt-get install -f\n for missing packages)\n\n\nSimulate\n option will use \n--dry-run\n option in dpkg to Simulate DEB installation.\n\n\nConfiguration file is a \ncsv\n file without headers. first column corresponds to URL ans the seconf field the file name under which the file is saved.\n\n\nEach DEB file to be installed should have following entry.\n\n\nURL to the deb file which can be accessed using wget  [ tab or space ] Name of the deb file without any spaces or special chars except hyphen.\n\n\nFor example to install Atom Editor the deb-files.list should look like below.\n\n\n\n\nhttps://atom-installer.github.com/v1.21.1/atom-amd64.deb,ATOM-Editor.deb\n\n\n\n\n\n\nFirst part is the URL to the deb file separated by ',' of the file.\n\n\n\n\n\n\nNote on file names in configuration\n\n\nPlease note that deb file will be  saved with the name mentioned in the file. (DEB file is named \nexactly\n as mentioned in the second field. So if you want them to be named with extension .deb include that in the second field and avoid illegal chars)\n\n\n\n\nInstall python packages (via pip)\n\n\nThis will install system wide python packages using pip. There are two lists. \npip.list\n and \npip3.list\n for python 2 and python 3 respectively.\nPre-requisite is that python-pip package is pre installed, If not , will be installed anyway.\n\n\n\n\nThe list files follow similar configuration as package list files. One item per line.\n\n\nSimulate flag will skip installing packages, unless \nTRAVIS=true\n.\n\n\n\n\n\n\nWarning\n\n\nDon't mix Python 3 packages with Python 2 packages.\n\n\n\n\nPurge Unwanted Packages\n\n\nThis will purge Unwanted packages from the system.\n\n\n\n\nThe packages mentioned in the list purge.list will be purged\n\n\nThe format of the purge.list is similar to that of packages, one packages per line of the file and no comments or anything else.\n\n\n\n\n\n\nWarning\n\n\nIt is necessary to pass command line argument \n-d\n or \n--deboalt\n to run this task. Otherwise task will be aborted.\n\n\n\n\nReset repositories\n\n\n\n\nThis will reset the repositories added by this script, and purge ppas added by this script in the list ppa.list.\n\n\nThis will \nNOT\n reset or remove repositories added by the DEB files.\n\n\nSimulate option has no effect on this action and ppa-purge \nWILL\n downgrade packages if necessary.\n\n\n\n\n\n\nScope of this function\n\n\nThis will \nNOT\n remove PPAs or repositories you have added manually or those added while installing DEB files.\n\n\n\n\nPre and Post task hooks\n\n\nSince version 4.0, it is possible to run list of shell-scripts (listed in pre/post-script.list), before any of the tasks like installing or adding repositories begin as well as after all the tasks are completed. Please note that currently no checks are being made if all the tasks completed successfully. The scripts are executed, regardless of the exit status of the tasks.\n\n\nInvoking scripts requires two flags to be passed.\n\n\n\n\n--enable-pre\n for pre task scripts\n\n\n--enable-post\n for post task scripts.\n\n\nConfigurations are similar to package lists, one line per script. Please include complete path for the shell-scripts.\n\n\nEmpty lines are ignored.\n\n\nIf you wish to run python or other code, please use shell-script as wrapper.\n\n\n\n\nHonoring simulate flag in hooks\n\n\nCheck for file \n.ae_simulate\n. By default its is not preset. It is preset \n set to true, if \n--simulate or -s\n flag is used.\n\n\nHonoring \nAUTOPILOT\n falg in hooks\n\n\nCheck for contents of file \n.autopilot\n. It is set to true if AUTOPILOT is true. Otherwise its not present.\n\n\nAll In one\n\n\nThis will perform Following actions. (In the following order)\n\n\n\n\nUpdate repository metadata\n\n\nUpgrade packages\n\n\nAdd repositories\n\n\nAdd PPAs in the list file\n\n\nInstall Apps\n\n\nInstall DEB files\n\n\n\n\nThis option will honor --yes and --simulate options as individual tasks would do.\n\n\nAUTOPILOT Mode\n\n\nAUTOPILOT=true will execute this task.\n\n\nDelete logs\n\n\nA log file is generated containing all the output generated by the apt and other commands and contain generic information and errors .\n\n\n\n\nThis task will delete the log file \nafter-effects.log\n.\n\n\nLog file is located in the directory \nafter-effects-logs\n in folder which you ran thin script.\n\n\nSometimes errors might not be written to log file but displayed on screen and vice-versa.\n\n\nPlease verify that everything went okay before deleting the logs.", 
            "title": "What can it do?"
        }, 
        {
            "location": "/tasks/#what-can-it-do", 
            "text": "", 
            "title": "What can it do?"
        }, 
        {
            "location": "/tasks/#add-repositories", 
            "text": "This will add the following repositories.   Insync  Google-Cloud-SDK  Google-Cloud GCSFUSE  Docker-CE (default add repository)  WineHQ (Latest wine builds)   Using  --fix  falg Please note that the above repositories are sometimes not updated for latest Ubuntu release and most certainly will not be available for upcoming release of Ubuntu(Alpha/Beta). It might take some time till the repositories are available for the latest release. Use -f or --fix command line option or --pre-release in case you are using a Development version of ubuntu to revert using latest available version of repositories (usually previous Ubuntu release or in case of Beta/Alpha latest stable release of ubuntu).  For more info see command line options.  Google Earth  Google Chrome  Spotify  Visual Studio Code  Signal Desktop  Mendeley Desktop (Not added by default)    Prefer local configuration  The script uses remote config files (/api/version) to determine whether to add repository or not. It helps in disabling some repositories which are often source of trouble. They always try to reflect default choices of the script. If you wish to disable it or override it, use  --no-stats  option as it will disable remote configuration as well   local variables will determine the outcome.    Your own Remote config  You can use your own remote config file. You need following to do so.\n- A Valid configuration file accessible over http/https/ftp without login.\n- You can copy the files in cfg directory of this branch.\n- Host the files on your own server/S3/website   Note the base url for that directory.\n- Use --api-endpoint {protocol}://{BASE_URL} while running the script. (Note that there is no trailing slash)\n- Config files should be accessible over {protocol}://{BASEURL}/version", 
            "title": "Add Repositories"
        }, 
        {
            "location": "/tasks/#canonical-partner-repositories", 
            "text": "Following repositories are conditional and are determined based on the flags or conditions set.   Canonical Partner repositories   Canonical partner repositories are not configured or enabled for derivatives of Ubuntu because thee might be some conflicts.   WineHQ   Docker-Community-Edition (default is to add repositories)   WineHQ and Docker-CE have a switch mentioned in beginning of the script and by default are as follows. Change according to your needs. If you re using 16.04 and above leaving this unchanged is the best option.  Default Variables #============================ Switches/ bools ================================ \n\n   # Latest wine builds \n   add_winehq_repo = true \n\n   #Docker community edition \n   add_docker_repo = true \n\n   #Mendeley Desktop \n   add_mendeley_repo = false \n\n   #Spotify \n   add_spotify_repo = true \n\n   #InSync \n   add_insync_repo = true \n\n   #Google Cloud SDK \n   add_googlecloud_repo = true \n\n   #Signal \n   add_signal_repo = false \n\n   #Skype \n   add_skype_repo = true \n\n   #VS code \n   add_vscode_repo = true \n\n   #Google \n   add_google_repo = true \n\n   #Kubernetes \n   add_kubernetes_repo = false \n\n   # Define Data Directory \n   data_dir = data    Note on 32 bit Architecture   Please note that Google Chrome doesn't support 32 bit architecture, please use Chromium.  Signal and Visual studio code do not support 32 bit architecture either.", 
            "title": "Canonical partner repositories"
        }, 
        {
            "location": "/tasks/#add-personal-package-archives-ppa", 
            "text": "PPAs can be added using the configuration file in data directory  ./data/ppa.list  This file  SHOULD  contain only one ppa entry per line (No comments or anything else anywhere in the file) in the format ppa: /ppa for example  ppa:mozillateam/firefox-next  The file will be read and the PPAs will be added from the list.  Logs will  show entry in the format  [ date and time ] [  PPA-Logs  ]  log    Warning   PPAs should be checked before they are added to the list. Sometimes PPAs listed in the file may not be available for all releases.  Debian does not support PPAs.", 
            "title": "Add personal package archives (PPA)"
        }, 
        {
            "location": "/tasks/#install-apt-packages", 
            "text": "Packages can be installed by using configuration lists in the data directory. This works similar to ppa list However its slightly different.  There is one  master list  or  list of lists  which contains the path to the list files from which the packages are to be installed.  This master list should contain the path to list files relative to script in following manner,  dir-relative-to-script / list file . For example if you have a list file security.list in data directory, then entry should look exactly like  data/security.list  packages in the files will not be installed if that file does not appear in the master list.  It helps keeping things separate for separate machines or needs. Minimal edit is required to switch from one list to another than rewriting the entire list file.  The Master list is named  app-list.list  and  MUST  only contain the list files one entry per line.  NO  comments or anything else is allowed.  Individual list files for different needs are to be written in similar way containing name of the package to be installed in one package per line format as before. similar to all the lists there  SHOULD NOT  be any comments or text or empty lines in those list files.  You can split files according to your needs and write your list of packages to be installed and only include the lists in the master list file which you intend to install.  It is a good idea to include packages from external repositories in a different list than others because they might fail sometimes.  Make sure that all the packages in the lists are available for your release. Using  -s  command line option helps. Also check for the logs for any errors or conflicts.", 
            "title": "Install apt packages"
        }, 
        {
            "location": "/tasks/#install-debian-package-archives-deb-files", 
            "text": "This will install deb files specified in the list deb-files.list   Logs will  show entry in the format  [ date and time ] [  PKG  ]  log  for dpkg actions and  APT Logs will  show entry in the format  [ date and time ] [  APT  ]  log  for actions performed by apt commands. ( apt-get install -f  for missing packages)  Simulate  option will use  --dry-run  option in dpkg to Simulate DEB installation.  Configuration file is a  csv  file without headers. first column corresponds to URL ans the seconf field the file name under which the file is saved.  Each DEB file to be installed should have following entry.  URL to the deb file which can be accessed using wget  [ tab or space ] Name of the deb file without any spaces or special chars except hyphen.  For example to install Atom Editor the deb-files.list should look like below.   https://atom-installer.github.com/v1.21.1/atom-amd64.deb,ATOM-Editor.deb   First part is the URL to the deb file separated by ',' of the file.    Note on file names in configuration  Please note that deb file will be  saved with the name mentioned in the file. (DEB file is named  exactly  as mentioned in the second field. So if you want them to be named with extension .deb include that in the second field and avoid illegal chars)", 
            "title": "Install Debian package archives (.deb files)"
        }, 
        {
            "location": "/tasks/#install-python-packages-via-pip", 
            "text": "This will install system wide python packages using pip. There are two lists.  pip.list  and  pip3.list  for python 2 and python 3 respectively.\nPre-requisite is that python-pip package is pre installed, If not , will be installed anyway.   The list files follow similar configuration as package list files. One item per line.  Simulate flag will skip installing packages, unless  TRAVIS=true .    Warning  Don't mix Python 3 packages with Python 2 packages.", 
            "title": "Install python packages (via pip)"
        }, 
        {
            "location": "/tasks/#purge-unwanted-packages", 
            "text": "This will purge Unwanted packages from the system.   The packages mentioned in the list purge.list will be purged  The format of the purge.list is similar to that of packages, one packages per line of the file and no comments or anything else.    Warning  It is necessary to pass command line argument  -d  or  --deboalt  to run this task. Otherwise task will be aborted.", 
            "title": "Purge Unwanted Packages"
        }, 
        {
            "location": "/tasks/#reset-repositories", 
            "text": "This will reset the repositories added by this script, and purge ppas added by this script in the list ppa.list.  This will  NOT  reset or remove repositories added by the DEB files.  Simulate option has no effect on this action and ppa-purge  WILL  downgrade packages if necessary.    Scope of this function  This will  NOT  remove PPAs or repositories you have added manually or those added while installing DEB files.", 
            "title": "Reset repositories"
        }, 
        {
            "location": "/tasks/#pre-and-post-task-hooks", 
            "text": "Since version 4.0, it is possible to run list of shell-scripts (listed in pre/post-script.list), before any of the tasks like installing or adding repositories begin as well as after all the tasks are completed. Please note that currently no checks are being made if all the tasks completed successfully. The scripts are executed, regardless of the exit status of the tasks.  Invoking scripts requires two flags to be passed.   --enable-pre  for pre task scripts  --enable-post  for post task scripts.  Configurations are similar to package lists, one line per script. Please include complete path for the shell-scripts.  Empty lines are ignored.  If you wish to run python or other code, please use shell-script as wrapper.", 
            "title": "Pre and Post task hooks"
        }, 
        {
            "location": "/tasks/#honoring-simulate-flag-in-hooks", 
            "text": "Check for file  .ae_simulate . By default its is not preset. It is preset   set to true, if  --simulate or -s  flag is used.", 
            "title": "Honoring simulate flag in hooks"
        }, 
        {
            "location": "/tasks/#honoring-autopilot-falg-in-hooks", 
            "text": "Check for contents of file  .autopilot . It is set to true if AUTOPILOT is true. Otherwise its not present.", 
            "title": "Honoring AUTOPILOT falg in hooks"
        }, 
        {
            "location": "/tasks/#all-in-one", 
            "text": "This will perform Following actions. (In the following order)   Update repository metadata  Upgrade packages  Add repositories  Add PPAs in the list file  Install Apps  Install DEB files   This option will honor --yes and --simulate options as individual tasks would do.", 
            "title": "All In one"
        }, 
        {
            "location": "/tasks/#autopilot-mode", 
            "text": "AUTOPILOT=true will execute this task.", 
            "title": "AUTOPILOT Mode"
        }, 
        {
            "location": "/tasks/#delete-logs", 
            "text": "A log file is generated containing all the output generated by the apt and other commands and contain generic information and errors .   This task will delete the log file  after-effects.log .  Log file is located in the directory  after-effects-logs  in folder which you ran thin script.  Sometimes errors might not be written to log file but displayed on screen and vice-versa.  Please verify that everything went okay before deleting the logs.", 
            "title": "Delete logs"
        }, 
        {
            "location": "/config/", 
            "text": "Overview of Configuration files\n\n\nThis Script is designed to be flexible. Configurations live in directory \n/data\n. For each task containing the necessary data and are easy to configure for your needs.\n\n\nPackage lists\n\n\nThese files contain list of apt packages which can be installed. Please see \nInstalling APT packages\n for more information.\n\n\n\n\n\n\n\n\nFile\n\n\nContents\n\n\nPresent in app-list\n\n\n\n\n\n\n\n\n\n\nlinux-mint.list\n\n\nSpecific for Linux Mint\n\n\nNo\n\n\n\n\n\n\ngnome-online-accounts.list\n\n\nSpecific for 16.04. For 17.04 and above use \ngoa.list\n\n\nNo\n\n\n\n\n\n\nbasic\n\n\nList of packages which usually come pre-installed. Please don't add if you are not sure what you are doing.\n\n\nNo\n\n\n\n\n\n\ngithub-bot-essentials.list\n\n\nProject specific\n\n\nNo\n\n\n\n\n\n\nadministration\n\n\nAdministration Tools like Synaptic\n\n\nYes\n\n\n\n\n\n\ndevelopment\n\n\nUsed for development tasks eg: rake\n\n\nYes\n\n\n\n\n\n\nexten-repo\n\n\nPackages from PPAs or External repositories. eg : Google Chrome, Spotify, Visual Studio Code, Google Cloud SDKs\n\n\nNo (But is added during Travis tests for supported releases)\n\n\n\n\n\n\ngoa\n\n\nGnome online accounts specific packages. These are necessary to get Gnome-Online-Accounts working properly in Empathy. Use only on 17.04 and above. For 16.04 use gnome-online-accounts\n\n\nYes\n\n\n\n\n\n\nmultimedia\n\n\nTools to edit photos and videos, video players and editors.\n\n\nYes\n\n\n\n\n\n\nproductivity\n\n\nEmail, Chat, Office tools, Document converters etc.\n\n\nYes\n\n\n\n\n\n\nsecurity\n\n\nSecurity related tools\n\n\nYes\n\n\n\n\n\n\nutilities\n\n\nUtilities and Tools\n\n\nYes except on debian.\n\n\n\n\n\n\nwine\n\n\nWine related packages like winetricks\n\n\nNo (But is added during Travis tests for supported releases)\n\n\n\n\n\n\nxenial-above\n\n\nPackages are not available in Xenial or below in Ubuntu repositories, but are available in 16.10 and later.\n\n\nNo (But is added during Travis tests for supported releases)\n\n\n\n\n\n\nlatex\n\n\nLatex related packages\n\n\nYes\n\n\n\n\n\n\npip.apt\n\n\nPython 2 APT dependencies\n\n\nYes\n\n\n\n\n\n\npip3.apt\n\n\nPython 3 APT dependencies\n\n\nYes\n\n\n\n\n\n\n\n\n\n\nNon package related lists (settings, deb files, delete packages list). The use and format is explained in individual sections.\n\n\n\n\n\n\n\n\nFile\n\n\nContents\n\n\nUsed by function\n\n\nLink to section\n\n\n\n\n\n\n\n\n\n\ngsettings\n\n\nVarious gsettings\n\n\nNone Yet\n\n\nNA\n\n\n\n\n\n\npurge\n\n\nList of packages to be purged\n\n\npurge_not_required\n\n\nLink\n\n\n\n\n\n\nppa\n\n\nList of ppas to be added\n\n\nadd_ppas\n\n\nLink\n\n\n\n\n\n\ndeb-files\n\n\nList of DEB files to be installed\n\n\ninstall_debs\n\n\nLink\n\n\n\n\n\n\nget.mlist\n\n\nUsed by get-after-effects.sh to download required list files\n\n\nNA\n\n\nget-after-effects.sh\n\n\n\n\n\n\npip2/pip3\n\n\nPython packages (Installed System wide)\n\n\n_install_pip_packages\n\n\nLink\n\n\n\n\n\n\npip-dep.apt\n\n\nAny APT dependencies which might be required by pip packages\n\n\nLink\n\n\n\n\n\n\n\n\npre-script\n\n\nList of bash scripts to be run before any of the tasks begin\n\n\nNA\n\n\n\n\n\n\n\n\npost-script\n\n\nList of scripts which can be run after all the tasks are completed\n\n\nNA\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nAfter you customize, might want to use simulate flag. \nsudo ./after-effects -s\n\n\n\n\nExceptions for packages in the list\nSome packages are not added or available for the some releases.\nDebian 8\ntimeshift nautilus-admin\nutilities.list, xenial-above.list are not added or tested.\nDebian 9\nutilities.list is not added or tested.\nTrusty\npeek, kdeconnect-indicator PPAs\nopenjdk-8-jdk from development.list\ngnome-calendar, gnome-todo, polari from productivity.list\nindicator-kdeconnect, peek, yubikey-manager-qt from extern-repo.list\nxenial-above.list is not added or tested.", 
            "title": "Configuration"
        }, 
        {
            "location": "/config/#overview-of-configuration-files", 
            "text": "This Script is designed to be flexible. Configurations live in directory  /data . For each task containing the necessary data and are easy to configure for your needs.", 
            "title": "Overview of Configuration files"
        }, 
        {
            "location": "/config/#package-lists", 
            "text": "These files contain list of apt packages which can be installed. Please see  Installing APT packages  for more information.     File  Contents  Present in app-list      linux-mint.list  Specific for Linux Mint  No    gnome-online-accounts.list  Specific for 16.04. For 17.04 and above use  goa.list  No    basic  List of packages which usually come pre-installed. Please don't add if you are not sure what you are doing.  No    github-bot-essentials.list  Project specific  No    administration  Administration Tools like Synaptic  Yes    development  Used for development tasks eg: rake  Yes    exten-repo  Packages from PPAs or External repositories. eg : Google Chrome, Spotify, Visual Studio Code, Google Cloud SDKs  No (But is added during Travis tests for supported releases)    goa  Gnome online accounts specific packages. These are necessary to get Gnome-Online-Accounts working properly in Empathy. Use only on 17.04 and above. For 16.04 use gnome-online-accounts  Yes    multimedia  Tools to edit photos and videos, video players and editors.  Yes    productivity  Email, Chat, Office tools, Document converters etc.  Yes    security  Security related tools  Yes    utilities  Utilities and Tools  Yes except on debian.    wine  Wine related packages like winetricks  No (But is added during Travis tests for supported releases)    xenial-above  Packages are not available in Xenial or below in Ubuntu repositories, but are available in 16.10 and later.  No (But is added during Travis tests for supported releases)    latex  Latex related packages  Yes    pip.apt  Python 2 APT dependencies  Yes    pip3.apt  Python 3 APT dependencies  Yes      Non package related lists (settings, deb files, delete packages list). The use and format is explained in individual sections.     File  Contents  Used by function  Link to section      gsettings  Various gsettings  None Yet  NA    purge  List of packages to be purged  purge_not_required  Link    ppa  List of ppas to be added  add_ppas  Link    deb-files  List of DEB files to be installed  install_debs  Link    get.mlist  Used by get-after-effects.sh to download required list files  NA  get-after-effects.sh    pip2/pip3  Python packages (Installed System wide)  _install_pip_packages  Link    pip-dep.apt  Any APT dependencies which might be required by pip packages  Link     pre-script  List of bash scripts to be run before any of the tasks begin  NA     post-script  List of scripts which can be run after all the tasks are completed  NA       Tip  After you customize, might want to use simulate flag.  sudo ./after-effects -s   Exceptions for packages in the list Some packages are not added or available for the some releases. Debian 8 timeshift nautilus-admin utilities.list, xenial-above.list are not added or tested. Debian 9 utilities.list is not added or tested. Trusty peek, kdeconnect-indicator PPAs openjdk-8-jdk from development.list gnome-calendar, gnome-todo, polari from productivity.list indicator-kdeconnect, peek, yubikey-manager-qt from extern-repo.list xenial-above.list is not added or tested.", 
            "title": "Package lists"
        }, 
        {
            "location": "/logs/", 
            "text": "Logs\n\n\n\n\nLogs are written to a file \ncurrent-dir\n/after-effects-logs/after-effects.log\n.\n\n\nTime-stamps in the logs may not be accurate because some commands buffer outputs.\n\n\n\n\n\n\nSensitive\n\n\nLog files might contain sensitive information or personally identifying information.", 
            "title": "Logs"
        }, 
        {
            "location": "/logs/#logs", 
            "text": "Logs are written to a file  current-dir /after-effects-logs/after-effects.log .  Time-stamps in the logs may not be accurate because some commands buffer outputs.    Sensitive  Log files might contain sensitive information or personally identifying information.", 
            "title": "Logs"
        }, 
        {
            "location": "/testing/", 
            "text": "CI and Testing\n\n\n\n\nTest Scripts\n\n\nTest Scripts assume that you are running on Travis. So They might fails if some  environment variables are not set. Please see, \nTravis environment variables\n.\n\n\n\n\nFollowing Tests are done on Travis-CI.\n\n\n\n\nshellcheck\n every executable script (Job #build.1)\n\n\nTest on Artful container (Job #build.2)\n\n\nTest on Xenial container (Job #build.3)\n\n\nTest on Bionic Beaver (Job #build.4)\n\n\nTest on Trusty (Host) (Job #build.5) (Soon to be removed)\n\n\nTest on Debian 9 Stretch (Job #build.6)\n\n\nTest on Debian 9 Stretch (Job #build.7)\n\n\nTest on Ubuntu Cosmic  (Job #build.8)\n\n\nBuild, Test \n deploy documentation (Job #build.9)\n\n\n\n\n\n\nInfo\n\n\nTrusty tests do not install indicator-kdeconnect, peek, openjdk-8-jdk, gnome-todo , gnome-calendar, polari and their PPAs. Please modify your lists accordingly.\n\n\n\n\n\n\nTest on Cosmic Cuttlefish (Job #build.6) using base image from \nhttp://cdimage.ubuntu.com/ubuntu-base/daily/\n\n\nBuild documentation using mkdocs (Job #build.7).\n\n\nDockerfiles used for building the image are in \n/dockerfiles\n directory, they use official Ubuntu base images with script dependencies.\n\n\nTest scripts are located in \n/tests\n directory.\n\n\nSince its a time consuming process only simulated install is done on CI. Linux mint and Elementary are not tested in containers as of now, but will be in the future.\n\n\nIt is possible that there might be some errors specific to your setup. Please report if so. It is \nStrongly\n advised to try install apps and deb files in simulate mode first before proceeding with actual installation.\n\n\n\n\n\n\nWarning\n\n\nNever set environment variable \nTRAVIS=true\n unless you are running on TRAVIS or are sure of its effects.", 
            "title": "Testing"
        }, 
        {
            "location": "/testing/#ci-and-testing", 
            "text": "Test Scripts  Test Scripts assume that you are running on Travis. So They might fails if some  environment variables are not set. Please see,  Travis environment variables .   Following Tests are done on Travis-CI.   shellcheck  every executable script (Job #build.1)  Test on Artful container (Job #build.2)  Test on Xenial container (Job #build.3)  Test on Bionic Beaver (Job #build.4)  Test on Trusty (Host) (Job #build.5) (Soon to be removed)  Test on Debian 9 Stretch (Job #build.6)  Test on Debian 9 Stretch (Job #build.7)  Test on Ubuntu Cosmic  (Job #build.8)  Build, Test   deploy documentation (Job #build.9)    Info  Trusty tests do not install indicator-kdeconnect, peek, openjdk-8-jdk, gnome-todo , gnome-calendar, polari and their PPAs. Please modify your lists accordingly.    Test on Cosmic Cuttlefish (Job #build.6) using base image from  http://cdimage.ubuntu.com/ubuntu-base/daily/  Build documentation using mkdocs (Job #build.7).  Dockerfiles used for building the image are in  /dockerfiles  directory, they use official Ubuntu base images with script dependencies.  Test scripts are located in  /tests  directory.  Since its a time consuming process only simulated install is done on CI. Linux mint and Elementary are not tested in containers as of now, but will be in the future.  It is possible that there might be some errors specific to your setup. Please report if so. It is  Strongly  advised to try install apps and deb files in simulate mode first before proceeding with actual installation.    Warning  Never set environment variable  TRAVIS=true  unless you are running on TRAVIS or are sure of its effects.", 
            "title": "CI and Testing"
        }, 
        {
            "location": "/changelogs/", 
            "text": "Change logs\n\n\nVersion 4.0\n\n\n\n\nPre and Post Hooks for scripts.\n\n\nCustom list of scripts can be run Before and after all the tasks.\n\n\nAdd version checks, always run latest version\n\n\nBrand new documentation site\n\n\nUse \nmkdocs\n to generate documentation\n\n\nAutomatically push \n deploy to gh-pages\n\n\nUse Netlify to manage gh-pages site\n\n\nCheck if script is in current directory, to avoid errors on hooks\n\n\nImprove log file format: Reduce clutter\n\n\nBug fixes and typo fixes\n\n\nSimplify TS logging\n\n\nRemote configuration for stats and stats server\n\n\nAbility to blacklist a release\n\n\nPrepare \n add skeleton for stats reporting\n\n\n\n\nVersion 3.6\n\n\n\n\nAdd Option to install system wide python packages using pip\n\n\nPromote Bionic to stable and update codenames\n\n\nUpdate pre-release to cosmic, rename test script for pre release\n\n\nRemove unused dockerfiles\n\n\n\n\nVersion 3.4\n\n\n\n\nDelete cached and downloaded DEBs. (Can be changed with \n-k\n flag )\n\n\nRemove Gnome Specific stuff from default list\n\n\nRemove PPAs incompatible with bionic\n\n\nBionic is supported with --pre-release flag only with default list.\n\n\n\n\nVersion 3.3\n\n\n\n\nAdd Signal Desktop repository\n\n\nBetter way to handle EOL error messages\n\n\nFix: Visual Studio Code GPG key not deleted while removing repos.\n\n\nLint Readme Markdown\n\n\nNuke Submodules\n\n\n\n\nVersion 3.2\n\n\n\n\nAllow Bionic test to fail on Travis.\n\n\nOnly print logs in Travis if there is an error or a flag is passed.\n\n\nSwitch to submodules for data directory\n\n\nList files have their own repo now.\n\n\nZesty reaches EOL soon. Remove it.\n\n\nUse daily images for bionic\n\n\n\n\nVersion 3.1\n\n\nAdded Support for Ubuntu Bionic Beaver\n\n\n\n\nAdded Support for Upcoming Ubuntu release bionic.\n\n\nAdded an option to use repository for last stable release on bionic.\n\n\nUse Ubuntu Base 18.04 LTS (Bionic Beaver) daily build to build docker image.\n\n\nAllow Bionic tests to fail on Travis CI.\n\n\nDockerfiles \n tests for bionic.\n\n\nInform in script if running on Upcoming release.\n\n\nDrop google-cloud-sdk from fixreponotavailable. Use \n--pre-release\n if using beta/alpha Ubuntu release.\n\n\nAdd Visual studio to repos instead of deb files\n\n\nRename logging directory to after-effects\n\n\n\n\nVersion 3.0\n\n\nConfirmation dialogs\n\n\n\n\nAdd Confirmation dialog using whiptail for Actions like Adding PPA, Repositories, Installing Apps, and Deb files\n\n\nProvide an option via command line to bypass the confirmation dialog for ci and automated environments or when its too annoying\n\n\n\n\nImprovements to Simulate option\n\n\n\n\nIf the simulate option is selected then Only calculate the upgrade but do not perform upgrade.\n\n\nAdded improved Simulate options. Helpful when just want to change somethings and test scripts without really downloading and installing packages\n\n\nSimulate option is by default false and can be toggled by passing \n-s\n or \n--simulate\n while running the script via command line\n\n\n\n\nPartner repositories and Derivatives\n\n\n\n\nDo not Enable Canonical Partner repositories in Ubuntu derivatives as they are enabled in installer or are different than Ubuntu. This leaves Partner repositories as they were before\n\n\n\n\nAdd Feature: Purge Unwanted Packages\n\n\n\n\nFix a bug in PPA purge function where it would wait for user confirmation\n\n\nAdd a feature to purge not required packages, usually games and boaltware which comes preloaded  with the install. It is necessary to pass a flag \n-d\n via command line to purge them while running the script since its dangerous\n\n\n\n\nLogs \n Console messages\n\n\n\n\nImproved logging . Redirecting errors and adding time-stamps works better.\n\n\n\n\nTravis CI and Docker Testing\n\n\n\n\nAdded Dockerfiles used for test cases since base Ubuntu image does not have few necessary packages (\nping, wget, lsb-release, whiptail, iputils-ping\n) and configuration required. Since most of these are bound to present on Ubuntu/Ubuntu Server/ Ubuntu derivatives it is not necessary to add them in the script.\n\n\nAdded Docker and Travis CI detection . Now the logs will indicate if the script is running in Container or Travis CI\n\n\nTest Script on Travis CI in parallel using jobs.\n\n\nTest Script on Trusty using Travis Host\n\n\nTest Script on Xenial, Artful and Zesty using Docker image build using Dockerfiles.\n\n\n\n\nOthers\n\n\n\n\nFixed Bugs\n\n\nFixed Typos and spell errors\n\n\nFixed a bug where exiting script via pressing escape would cause message to be printed twice\n\n\nImproved exit status handling\n\n\n\n\nVersion 2.0\n\n\n\n\nComplete rewrite from scratch\n\n\nImprovements in logging and console output\n\n\nReduced verbosity in terminal output\n\n\nFlexible with packages and deb files\n\n\nReduced complex dependencies\n\n\nEasy to configure\n\n\nAdd Simulate install option for installing deb files and apps. Easier to test scripts now .\n\n\n\n\nVersion 1.0\n\n\n\n\nInitial upload.", 
            "title": "Changelogs"
        }, 
        {
            "location": "/changelogs/#change-logs", 
            "text": "", 
            "title": "Change logs"
        }, 
        {
            "location": "/changelogs/#version-40", 
            "text": "Pre and Post Hooks for scripts.  Custom list of scripts can be run Before and after all the tasks.  Add version checks, always run latest version  Brand new documentation site  Use  mkdocs  to generate documentation  Automatically push   deploy to gh-pages  Use Netlify to manage gh-pages site  Check if script is in current directory, to avoid errors on hooks  Improve log file format: Reduce clutter  Bug fixes and typo fixes  Simplify TS logging  Remote configuration for stats and stats server  Ability to blacklist a release  Prepare   add skeleton for stats reporting", 
            "title": "Version 4.0"
        }, 
        {
            "location": "/changelogs/#version-36", 
            "text": "Add Option to install system wide python packages using pip  Promote Bionic to stable and update codenames  Update pre-release to cosmic, rename test script for pre release  Remove unused dockerfiles", 
            "title": "Version 3.6"
        }, 
        {
            "location": "/changelogs/#version-34", 
            "text": "Delete cached and downloaded DEBs. (Can be changed with  -k  flag )  Remove Gnome Specific stuff from default list  Remove PPAs incompatible with bionic  Bionic is supported with --pre-release flag only with default list.", 
            "title": "Version 3.4"
        }, 
        {
            "location": "/changelogs/#version-33", 
            "text": "Add Signal Desktop repository  Better way to handle EOL error messages  Fix: Visual Studio Code GPG key not deleted while removing repos.  Lint Readme Markdown  Nuke Submodules", 
            "title": "Version 3.3"
        }, 
        {
            "location": "/changelogs/#version-32", 
            "text": "Allow Bionic test to fail on Travis.  Only print logs in Travis if there is an error or a flag is passed.  Switch to submodules for data directory  List files have their own repo now.  Zesty reaches EOL soon. Remove it.  Use daily images for bionic", 
            "title": "Version 3.2"
        }, 
        {
            "location": "/changelogs/#version-31", 
            "text": "", 
            "title": "Version 3.1"
        }, 
        {
            "location": "/changelogs/#added-support-for-ubuntu-bionic-beaver", 
            "text": "Added Support for Upcoming Ubuntu release bionic.  Added an option to use repository for last stable release on bionic.  Use Ubuntu Base 18.04 LTS (Bionic Beaver) daily build to build docker image.  Allow Bionic tests to fail on Travis CI.  Dockerfiles   tests for bionic.  Inform in script if running on Upcoming release.  Drop google-cloud-sdk from fixreponotavailable. Use  --pre-release  if using beta/alpha Ubuntu release.  Add Visual studio to repos instead of deb files  Rename logging directory to after-effects", 
            "title": "Added Support for Ubuntu Bionic Beaver"
        }, 
        {
            "location": "/changelogs/#version-30", 
            "text": "", 
            "title": "Version 3.0"
        }, 
        {
            "location": "/changelogs/#confirmation-dialogs", 
            "text": "Add Confirmation dialog using whiptail for Actions like Adding PPA, Repositories, Installing Apps, and Deb files  Provide an option via command line to bypass the confirmation dialog for ci and automated environments or when its too annoying", 
            "title": "Confirmation dialogs"
        }, 
        {
            "location": "/changelogs/#improvements-to-simulate-option", 
            "text": "If the simulate option is selected then Only calculate the upgrade but do not perform upgrade.  Added improved Simulate options. Helpful when just want to change somethings and test scripts without really downloading and installing packages  Simulate option is by default false and can be toggled by passing  -s  or  --simulate  while running the script via command line", 
            "title": "Improvements to Simulate option"
        }, 
        {
            "location": "/changelogs/#partner-repositories-and-derivatives", 
            "text": "Do not Enable Canonical Partner repositories in Ubuntu derivatives as they are enabled in installer or are different than Ubuntu. This leaves Partner repositories as they were before", 
            "title": "Partner repositories and Derivatives"
        }, 
        {
            "location": "/changelogs/#add-feature-purge-unwanted-packages", 
            "text": "Fix a bug in PPA purge function where it would wait for user confirmation  Add a feature to purge not required packages, usually games and boaltware which comes preloaded  with the install. It is necessary to pass a flag  -d  via command line to purge them while running the script since its dangerous", 
            "title": "Add Feature: Purge Unwanted Packages"
        }, 
        {
            "location": "/changelogs/#logs-console-messages", 
            "text": "Improved logging . Redirecting errors and adding time-stamps works better.", 
            "title": "Logs &amp; Console messages"
        }, 
        {
            "location": "/changelogs/#travis-ci-and-docker-testing", 
            "text": "Added Dockerfiles used for test cases since base Ubuntu image does not have few necessary packages ( ping, wget, lsb-release, whiptail, iputils-ping ) and configuration required. Since most of these are bound to present on Ubuntu/Ubuntu Server/ Ubuntu derivatives it is not necessary to add them in the script.  Added Docker and Travis CI detection . Now the logs will indicate if the script is running in Container or Travis CI  Test Script on Travis CI in parallel using jobs.  Test Script on Trusty using Travis Host  Test Script on Xenial, Artful and Zesty using Docker image build using Dockerfiles.", 
            "title": "Travis CI and Docker Testing"
        }, 
        {
            "location": "/changelogs/#others", 
            "text": "Fixed Bugs  Fixed Typos and spell errors  Fixed a bug where exiting script via pressing escape would cause message to be printed twice  Improved exit status handling", 
            "title": "Others"
        }, 
        {
            "location": "/changelogs/#version-20", 
            "text": "Complete rewrite from scratch  Improvements in logging and console output  Reduced verbosity in terminal output  Flexible with packages and deb files  Reduced complex dependencies  Easy to configure  Add Simulate install option for installing deb files and apps. Easier to test scripts now .", 
            "title": "Version 2.0"
        }, 
        {
            "location": "/changelogs/#version-10", 
            "text": "Initial upload.", 
            "title": "Version 1.0"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nThis project is licensed under GPL v3. You should have received a copy of the\nlicense along with this software.\n\n\nExternal libraries and tools\n\n\nThis project uses \nmkdocs\n for documentation and\n\nmkdocs-material\n theme.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "This project is licensed under GPL v3. You should have received a copy of the\nlicense along with this software.", 
            "title": "License"
        }, 
        {
            "location": "/license/#external-libraries-and-tools", 
            "text": "This project uses  mkdocs  for documentation and mkdocs-material  theme.", 
            "title": "External libraries and tools"
        }, 
        {
            "location": "/privacy/", 
            "text": "Privacy Policy\n\n\nOur privacy policy related to website is available \nhere\n.\n\n\nAnonymous stats collection\n\n\n\n\nInfo\n\n\nYour passwords, usernames, environment variables of anything sensitive is not collected.\n\n\n\n\nThe script \nafter-effects\n collects anonymous usage statistics. The following might be collected.\n\n\n\n\nRandomized UUID generated per run.\n\n\nLast exit code.\n\n\nSystem Architecture (x64/x86/ARM/ARM64).\n\n\nTotal execution time.\n\n\nDistribution name (Ubuntu, Linux Mint etc.)\n\n\nDistribution code name (bionic, artful etc)\n\n\nFeature/Task selected.\n\n\nFlags used.\n\n\nTimezone and system language.\n\n\nHost-name.\n\n\n\n\n\n\nTip\n\n\n\n\nNo personally identifiable information is collected or reported back.\n\n\nThis feature can be disabled via \n--no-stats\n flag.", 
            "title": "Privacy Policy"
        }, 
        {
            "location": "/privacy/#privacy-policy", 
            "text": "Our privacy policy related to website is available  here .", 
            "title": "Privacy Policy"
        }, 
        {
            "location": "/privacy/#anonymous-stats-collection", 
            "text": "Info  Your passwords, usernames, environment variables of anything sensitive is not collected.   The script  after-effects  collects anonymous usage statistics. The following might be collected.   Randomized UUID generated per run.  Last exit code.  System Architecture (x64/x86/ARM/ARM64).  Total execution time.  Distribution name (Ubuntu, Linux Mint etc.)  Distribution code name (bionic, artful etc)  Feature/Task selected.  Flags used.  Timezone and system language.  Host-name.    Tip   No personally identifiable information is collected or reported back.  This feature can be disabled via  --no-stats  flag.", 
            "title": "Anonymous stats collection"
        }
    ]
}